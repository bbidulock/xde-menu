=pod

=head1 NAME

xde-menu - XDG compliant menus for XDE

=head1 SYNOPSIS

 xde-menu [ COMMAND ] [ OPTIONS ]
 xde-menugen [ OPTIONS ]
 xde-menu-popmenu [ OPTIONS ]
 xde-menu-monitor [ OPTIONS ]
 xde-menu-replace [ OPTIONS ]
 xde-menu-refresh [ OPTIONS ]
 xde-menu-restart [ OPTIONS ]
 xde-menu-quit [ OPTIONS ]

=head1 DESCRIPTION

B<xde-menu> is a command-line program that can be used to generate an
XDG compliant menu in a number of formats to support configuration of
the root menu for light-weight window managers.
It is a menu generator, system tray menu, and pop-up menu that
can be used to both generate XDG compliant menus for a number of popular
light-weight window managers as well as providing a system tray and
pop-up menu.

B<xde-menu> is capable of generating either a complete menu for a number
of well-known window managers, or for generating a sub-menu that can be
included in the root menu of those window managers.

=head1 OPTIONS

B<xde-menu> uses L<getopt_long_only(3)>, so non-ambiguous option
abbreviations are permitted.  B<xde-menu> recognizes the following
options:

=head2 COMMAND OPTIONS

Command options affect the primary operating mode of the program.  Only
one command option can be specified.
B<xde-menu> recognizes the following command options:

=over

=item [B<--menugen>, B<-G>]

Specifies that B<xde-menu> is to generate a window manager root-menu and
then exit.  No new instance is created: only the root-menu is generated
and then the program exits.
This option does not cause an error when an instance of B<xde-menu> is
running (or not).
This is the default when B<xde-menu> is invoked as B<xde-menugen>, or
when no command option is specified.

B<xde-menu> is typically used with the B<--menugen> option to generate
an initial window manager root menu as part of the initialization
sequence of a particular window manager or panel.  The B<--wmname>,
B<--format>, B<--output> and B<--die-on-error> options are normally
specified in this case.

=item B<--monitor>, B<-g>

Specifies that B<xde-menu> is not to exit after successfully generating
the menu, but to monitor pertinent directories for changes, and
regenerate the menu when changes are detected.  This option implies the
B<--output> option, without an argument (i.e. the default or detected
menu file will be used).

When changes are detected in the application database, the menu is
regenerated after an interval of no changes.  When changes are detected
to the active window manager, the menu is regenerated, to the location
and in the format of the new window manager, after an interval of no
changes.

Runs a new instance of B<xde-menu> and specifies that the program is to
monitor pertinent directories for changes and regenerate all menus
(root, system tray and pop-up) when changes are detected.
This option implies the B<--output> option.
This option normally requires L<libinotify(3)>.
This option causes an error when another instance of B<xde-menu> is
already running.
(See the B<--replace> option, below.)
This is the default when B<xde-menu> is invoked as L<xde-menu-monitor(1)>.

When performing background operation with the B<--monitor> command
option, the program will add a status icon to the system tray.  The
status icon will be able to be used to pop up the menu.  Addition of a
status icon to the system tray can be avoided using the B<--notray>
option.  The status icon can also be removed using the status icon
pop-up configuration menu.

B<xde-menu> is typically invoked as an XDG I<autostart> item with the
B<--monitor> command option at startup of the X11 session.  The
B<--wmname> and B<--format> options can often be unspecified.  An XDG
I<autostart> F<.desktop> file is installed when the package installs
that will invoke B<xde-menu> and add a status icon to the system tray.

=item B<--popmenu>, B<-P>

Specifies that B<xde-menu> is to request a running instance to pop-up a
menu.  The menu to pop up, the location and invocation of the pop-up is
controlled by additional general options.  Depending on the setting of
the B<--button> option, this will either pop up the menu at the current
pointer position, or will pop up the menu at the centre of the screen.
When multiple monitors are present, the menu will pop up at the centre
of the monitor in which the pointer currently resides (which is used by
most tiling window managers as the "current" monitor).  This option does
not cause an error when no current instance of B<xde-menu> is running.
This is the default when B<xde-menu> is invoked as
L<xde-menu-popmenu(1)>.

For pop-up menu operation, an background instance of B<xde-menu> can be
asked to pop up an applications or other menu using the B<--popmenu>
command option.  The major use of this operation is to pop a menu from
another program (such as a panel), or to pop a menu as a result of a
button click or button press using window manager bindings.

=item B<--refresh>, B<-E>

Asks a running instance of B<xde-menu> to refresh the menu.  This is
normally not required when B<xde-menu> is run with the B<--monitor>
option, as B<xde-menu> then detects when F<.desktop> files, icons, theme
files or window managers have changed and automatically refreshes the
menus in response.  This option causes an error when no current instance
of B<xde-menu> is running.  This is the default when B<xde-menu> is
invoked as L<xde-menu-refresh(1)>.

=item B<--restart>, B<-S>

Asks a running instance of B<xde-menu> to restart (re-execute itself
with the same options and arguments).  This is useful when the
B<xde-menu> executables have been upgraded.  This option causes an error
when no current instance of B<xde-menu> is running.  This is the default
when B<xde-menu> is invoked as L<xde-menu-restart(1)>.

=item B<--replace>, B<-R>

Replace a currently running instance (that was invoked with the
B<--monitor> option).  It is not an error if no other instance is
running.  Runs a new instance of B<xde-menu> and specifies that the
program is to monitor pertinent directories for changes and regenerate
all menus when changes are detected.  This option implies the
B<--output> and B<--monitor> option.  This option normally requires
L<libinotify(3)>.  This option (unlike B<--monitor>) does not cause an
error when another instance of B<xde-menu> is already running, and
simply replaces all other instances.  This is the default when
B<xde-menu> is invoked as L<xde-menu-replace(1)>.

=item B<--quit>, B<-q>

Ask a currently running instance (that was invoked with the B<--monitor>
option) to quit.  It is not an error if no other instance is running.
This is the default when B<xde-menu> is invoked as L<xde-menu-quit(1)>.

=item B<--help>, B<-h>, B<-?>, B<--?>

Print usage information, including the current values of option
defaults, and exit.

=item B<--version>, B<-V>

Print version information and exit.

=item B<--copying>, B<-C>

Print copying information and exit.

=back

=head2 GENERAL OPTIONS

=over

=item B<--display> I<DISPLAY>

Specify the display to use (overriding the C<DISPLAY> environment
variable).  The default is the value of the C<DISPLAY> environment
variable.

=item B<--filename>, B<-c> I<FILENAME>

Use a different configuration file from the default.  The default is the
file F<$XDG_CONFIG_HOME/xde-menu/rc>.  Any resources not present in the
configuration file will be taken from from the
F</usr/share/X11/app-defaults/XDE-Menu> resource file.  Resources
present in the display's B<RESOURCE_MANAGER> property will take
precedence over any setting in these files.

=item B<--notray>

Run without installing the menu in the system tray.  This is the default
when the program in invoked as L<xde-menu-generate(1)> or when the
B<--menugen> option is specified.

This option can be set with the resource I<xde-menu.systray>.

=item B<--nogenerate>

Do not generate window manager root menus.  This option is invalid when
no command option is specified, or when the program is invoked as
B<xde-menugen>.  When combined with the B<--notray> option, the program
will background itself and service B<--popmenu> requests only.

=item B<-x>, B<--exit>

When running in the foreground and generating window manager root menus,
exit the main process immediately after generating menus.  This permits
window manager root menus to be generated before launching the window
manager, but not waiting longer than necessary.  The default is to run
in the foreground and continue to run in the foreground, even after
generating window manager root menus.

=item B<--verbose>[B<=>I<LEVEL>], B<-v>[I<LEVEL>]

When generating output, generate more verbose output.  Increments or
sets the output verbosity to I<LEVEL>.  The default level is C<1>.
Normal output is printed to standard output.  This option may be
repeated.

=item B<--debug>[B<=>I<LEVEL>], B<-D>[I<LEVEL>]

Print debugging information to standard error during operation.
Increments or sets the debug verbosity to I<LEVEL>.  The default level
is C<0>.  Debugging output is printed to standard error.  This option
may be repeated.

=back

=head2 MENU FORMAT OPTIONS

The following options affect the formatting and output of the window
manager root window menu, system tray menu and pop-up menu.  Not all
options affect the system tray and pop-up menus.

=over

=item B<--wmname>, B<-w> I<WMNAME>

Specifies the name of the window manager for which menus are to be
generated.  Currently recognized window managers are as follows:


L<2bwm(1)>,
L<adwm(1)>,
L<aewm(1)>,
L<aewm++(1)>,
L<afterstep(1)>,
L<awesome(1)>,
L<blackbox(1)>,
L<bspwm(1)>,
L<ctwm(1)>,
L<cwm(1)>,
L<dtwm(1)>,
L<dwm(1)>,
L<echinus(1)>,
L<etwm(1)>,
L<failsafewm(1)>,
L<fluxbox(1)>,
L<flwm(1)>,
L<fvwm(1)>,
L<glasswm(1)>,
L<goomwwm(1)>,
L<herbstluftwm(1)>,
L<i3(1)>,
L<icewm(1)>,
L<jwm(1)>,
L<larswm(1)>,
L<matwm2(1)>,
L<metacity(1)>,
L<mvwm(1)>,
L<mwm(1)>,
L<openbox(1)>,
L<pekwm(1)>,
L<spectrwm(1)>,
L<twm(1)>,
L<uwm(1)>,
L<vtwm(1)>,
L<waimea(1)>,
L<wind(1)>,
L<wm2(1)>,
L<wmaker(1)>,
L<wmii(1)>,
L<wmx(1)>,
L<xdwm(1)> and
L<yeahwm(1)>.

When unspecified, or when a window manager change is detected, the
setting of the C<_XDE_WM_NAME> property on the root window (or the
C<WM_NAME> or C<_NET_WM_NAME> property on the window manager check
window, or on the window owning the window manager selection, C<WM_S%d>)
is examined to determine the window manager name.  This is accomplished
by converting the value of either property to all lowercase.  See also,
L</ENVIRONMENT> and L</PROPERTIES>.

When the program is running in monitor mode for the active window
manager, the window manager name need not be specified explicitly.
However, when using the program in B<--menugen> mode to simply generate
a root menu without a C<DISPLAY> environment variable, this option (or
the B<--format> option) must be specified explicitly.

=item B<--format>, B<-f> I<FORMAT>

Specify the output format.  Recognized output formats are as follows:

L<2bwm(1)>,
L<adwm(1)>,
L<aewm(1)>,
L<aewm++(1)>,
L<afterstep(1)>,
L<awesome(1)>,
L<blackbox(1)>,
L<bspwm(1)>,
L<ctwm(1)>,
L<cwm(1)>,
L<dtwm(1)>,
L<dwm(1)>,
L<echinus(1)>,
L<etwm(1)>,
L<failsafewm(1)>,
L<fluxbox(1)>,
L<flwm(1)>,
L<fvwm(1)>,
L<glasswm(1)>,
L<goomwwm(1)>,
L<herbstluftwm(1)>,
L<i3(1)>,
L<icewm(1)>,
L<jwm(1)>,
L<larswm(1)>,
L<matwm2(1)>,
L<metacity(1)>,
L<mvwm(1)>,
L<mwm(1)>,
L<openbox(1)>,
L<pekwm(1)>,
L<spectrwm(1)>,
L<twm(1)>,
L<uwm(1)>,
L<vtwm(1)>,
L<waimea(1)>,
L<wind(1)>,
L<wm2(1)>,
L<wmaker(1)>,
L<wmii(1)>,
L<wmx(1)>,
L<xdwm(1)>,
L<yeahwm(1)>.

When unspecified, the setting or implied setting of the B<--wmname>
option is used.  If the B<--wmname> option is also unspecified, or when
a window manager change is detected, the setting of the C<_XDE_WM_NAME>
property on the root window (or the C<WM_NAME> or C<_NET_WM_NAME>
property on the window manager check window, or on the window owning the
window manager selection, C<WM_S%d>) is examined to determine
the window manager name.  This is accomplished by converting the first
word in the value of either property to all lowercase.  See also,
L</ENVIRONMENT> and L</PROPERTIES>.

When the program is running in monitor mode for the active window
manager, the format need not be specified explicitly.  However, when
using the program in B<--menugen> mode to simply generate a root menu
without a C<DISPLAY> environment variable, this option (or the
B<--wmname> option) must be specified explicitly.

Note that L<openbox(1)> and L<wmaker(1)> support both an old and new
menu format.  The old formats are only selected when explicitly
specified as C<openboxold> or C<wmakerold>.

Note also that L<perlpanel(1)> format is not associated with a specific
window manager; however, the B<--wmname> option is used to determine
which entries to place in the perl panel output and the B<--desktop>
option is used to determine which application or system entries to
include.

=item B<--fullmenu>, B<-F>, B<--nofullmenu>, B<-l>

When specified, output a full menu and not only the application
sub-menu, or not.  The default is to output a full menu.  This also
affects the system tray menu and pop-up menus accordingly.

=item B<--desktop>, B<-d> I<DESKTOP>

Specify the desktop name for C<NotShowIn> and C<OnlyShowIn> comparisons.
The default is the all uppercase string corresponding to the window
manager name, (or the desktop name explicitly specified for the window
manager and format), unless the C<XDG_CURRENT_DESKTOP> environment
variable is defined.

=item B<--root-menu>, B<-r> I<MENU>

Specify the location of the root menu file.  The default is calculated
using XDG environment variables (see L</ENVIRONMENT>), and defaults to
the file F<${XDG_MENU_PREFIX}applications.menu> in the
F<$XDG_CONFIG_HOME:$XDG_CONFIG_DIRS> search path.  Note, however, that
B<xde-menu> supports both C<applications> and C<system> menus using the
B<--menu> option.

=item B<--output>, B<-o> [I<FILENAME>]

Write the window manager root menu output to the file, I<FILENAME>.
This is particularly useful with option B<--die-on-error> as the output
will not be written at all if an error is encountered.  If the
I<FILENAME> is not specified, the setting of the C<_XDE_WM_MENU>
property on the root window is examined to determine the location of the
menu file.  When the property is not set or not available, the default
menu location for the current B<--wmname> or B<--format> will be used.

Note that not all light-weight window managers support a root menu.
Note also that at startup, B<xde-menu> will wait several seconds for a
window manager to appear if one is not present at initialization and
neither the B<--wmname> nor B<--format> options are specified.

=item B<--icons>, B<--noicons>, B<-I>

Include or do not include icons in the generated menu files.  This
option has no effect when it is not possible to generate icons for the
menu format.  That is, when the B<--format> is one such as
L<blackbox(1)>, or L<waimea(1)>, it is not possible to place icons in
the root menu and this option is therefore ignored.  The default is to
place icons in icon capable generated menus.

This option affects system tray menus and pop-up menus as well.  The
default for system tray and pop-up menus is to only place icons in the
generated menus when the B<--format> also supports icons (to mimic the
behaviour of the underlying window manager).  When the window manager
B<--format> does not support a root menu, (e.g. L<dwm(1)>), icons will
be added to the menu.

=item B<--theme> I<THEME>

Specify the theme name to use when displaying menus.  The default
is to obtain the theme name from the default locations (such as the
F<$HOME/.gtkrc-2.0> file).

=item B<--icon-theme>, B<-t> I<THEME>

Specify the icon theme name to use when generating icons.  The default
is to obtain the icon theme name from the default locations (such as the
F<$HOME/.gtkrc-2.0> file).

=item B<--launch>, B<-L>, B<--nolaunch>, B<-0>

Specifies whether to use L<xdg-launch(1)> to launch the desktop files
directly or not.  This option will only be honoured when the
L<xdg-launch(1)> program is available and accessible.  Also, some window
managers (e.g. L<openbox(1)>) provide their own desktop startup
launching and some don't.  So, the default setting may depend on the
active window manager.

When specified and available, rather than launching programs itself,
B<xde-menu> will pass the appropriate command to L<xdg-launch(1)>.  Note
that if a terminal emulation program was also specified with environment
variables or X resources, these preferences will be passed to
L<xdg-launch(1)> in environment variables.

=item B<--style>, B<-s> I<STYLE>

Specify which format of window manager menu specification output to
generate.  I<STYLE> can be one of the following:

=over

=item I<fullmenu>

The default: output a full menu suitable for use as the root menu
specification for the window manager.

=item I<appmenu>

Output a complete menu; however, only output the applications portion of
the menu (no styles, window manager controls, logout, etc.), suitable to
reference as an "Applications" menu.

=item I<entries>

Only output the entries for the menu but not the enclosing menu itself:
this is useful for some pipe menu commands.

=back

This option does not affect the system tray nor pop-up menus.

=item B<--menu>, B<-M> I<MENUNAME>

Specifies the filename stem of the root menu filename.
This defaults to "F<applications>."
Another useful value is "F<system>."
Other possible values include "F<information>" and "F<settings>."
The special value "F<all>" specifies that menus are to be generated for all known stems.
This option only affects the automatic determination of the root menu
file.
When the root menu file is specified with the B<--root-menu> option, the
filename is determined verbatim.

=item B<--excluded>

Include applications that are otherwise excluded in the menu
specification.  This option will normally make applications that specify
multiple categories appear in all categories rather than just the one
category.

=item B<--nodisplay>

Include applications that are marked no-display.  Applications that are
marked no-display are typically marked thus because they only a mime
type for the mime type database, or because they are only to be
displayed by applications that understand them (e.g. some window manager
applications).

=item B<--unallocated>

Include applications that would be excluded because they were previously
allocated a location in the menu.

=item B<--empty>

Include empty sub-menus.  This is not a particularly useful feature for
generation of the pop-up menu.  For window manager root menus, it
typically does not matter, as most window managers suppress empty
sub-menus.

=item B<--separators>

Include all separators in the generated menu, whether required or not.
This option is the only way to achieve multiple separators between
items.  Without this option, only one separator will occur between any
two items, and no separator will occur at the beginning or end of a
menu.

=item B<--sort>

Sort the entries by display name instead of name.

=item B<--actions>

Provide a sub-menu for selecting actions for an application in those
applications that have actions.

=item B<--tooltips>

Include verbose tool-tips for application menu items.

=back

=head2 POP-UP MENU OPTIONS

The following options are only valid when the B<--popmenu> command
option has been specified or implied.  These options only affect the
pop-up menu.

=over

=item B<--screen> I<SCREEN>

Specify the screen number, I<SCREEN>, to use when positioning the menu.
The default is either specified by the C<DISPLAY> environment variable
(when that variable specifies a screen); otherwise, all screens will be
considered, and the screen containing the selected monitor will be used.

=item B<--Monitor> I<MONITOR>

Specify the monitor number, I<MONITOR>, to use when positioning the
menu.

=item B<--timestamp>, B<-T> I<TIMESTAMP>

Provides the X11 server time stamp of the event that caused the pop-up.
This is the X11 server time stamp of the button or key press that
invoked the pop-up.  When the program is launched with startup
notification, the time stamp will be take from the B<DESKTOP_STARTUP_ID>
environment variable.

=item B<--button>, B<-b> I<BUTTON>

Specifies the button that was used to invoke the pop-up.  Defaults to
C<Button3> (3).  This should be the button that was used to pop the
menu.  A window manager that invokes this command in response to a
button press should release its passive grab on the button before
invoking the pop-up menu so that the popped up menu can grab the button.
A I<BUTTON> of zero (0) means that the program was invoked with a
key press instead of a button.

=item B<--keypress>, B<-k> I<KEYSPEC>

Specifies the key specification that was used to invoke the pop-up.
Defaults to none.  This should be the key that was used to pop the menu.
A window manager that invokes this command in response to a key press
should release its passive grab on the key before invoking the pop-up
menu so that the popped up menu can grab the keyboard.  A I<KEYSPEC> of
none means that the program was invoked with an unknown key press.

=item B<--pointer>, B<-p>

An alternate way of specifying B<--button=1>.

=item B<--keyboard>, B<-K>

An alternate way of specifying B<--keypress> with no option argument.

=item B<--which>, B<-i> {B<active>|B<focused>|B<pointer>|I<MONITOR>}

Specifies the monitor on which to pop the menu.  The default is to
determine the monitor based on other options (such as the B<--button>
option).  The option argument can be one of the following (case
insensitive, may be abbreviated):

=over

=item C<default>

When unspecified or specified as C<default>, the default monitor
selection algorithm is used as follows:

=over 4

=item 1.

When the B<--button> or B<--pointer> option is specified and non-zero,
select the monitor containing the pointer.

=item 2.

When neither B<--button> nor B<--pointer> option is specified, or
B<--button> is specified as zero, or B<--keypress> or B<--keyboard> is
specified, select the monitor with the keyboard focus.

=item 3.

When there is no monitor with the keyboard focus, select the monitor
with the active window.

=item 4.

When there is no active window and no window with the keyboard focus,
select the monitor containing (or nearest to) the pointer.

=back

=item C<active>

Use the monitor containing the active client.

=item C<focused>

Use the monitor containing the window with the keyboard focus (focused
client).

=item C<pointer>

Use the monitor containing (or closest to) the pointer.

=item I<MONITOR>

Use the specified monitor number, I<MONITOR>, indexed from zero (0),
specifying the screen and monitor on which to pop the menu.  When
there is one screen and multiple monitors (typical case for Xinerama or
RANDR multi-head setups), I<MONITOR> specifies the monitor, indexed from
zero (0).  When there are multiple screens, the B<--screen> option
specifies the screen and I<MONITOR> specifies the monitor.

=back

=item B<--where>, B<-W> {B<default>|B<pointer>|B<center>|B<topleft>|B<bottomright>|I<WHERE>}

Specifies the position for the pop-up menu.  This can be one of the
following values (case insensitive, may be abbreviated):

=over

=item C<default>

Place the menu automatically based on other information, such as the
button or key pressed to invoke the menu.  This is the default when
unspecified.  The default placement algorithm is as follows:

=over

=item 1.

If B<--button> is specified and non-zero, or B<--pointer> is specified,
place the menu at the pointer regardless of the screen and monitor
currently containing the pointer.  If the pointer is positioned outside
an active monitor, fall back to the behaviour as if B<--button> or
B<--pointer> was not specified.

=item 2.

If B<--button> is unspecified or zero (0), or B<--keyboard> is
specified, place the menu in the centre (considering work area) of the
screen and monitor which currently contains the keyboard focus or active
window.

=back

=item C<pointer>

Place the northwest corner of the menu under the mouse pointer.  This
will always succeed.  This is the default when B<--button> is specified
and non-zero.

=item C<center>

Place the menu in the centre of the root window on the current screen
and monitor.  This is the default when B<--button> is unspecified or
zero, or B<--keyboard> is specified.

=item C<topleft>

Place the menu in the top-left corner of the current screen and monitor
work area (considering panels and docks).

=item C<bottomright>

Place the menu in the bottom-right corner of the current screen and
monitor work area (considering panels and docks).

=item I<WHERE>

Place the menu at the location specified by I<WHERE>, which should be a
string containing a screen geometry that can be parsed by
L<XParseGeometry(3)>.  This is useful when the menu is launched from a
menu button in an external program and the menu should be positioned
adjacent to the button.  The geometry should be the geometry of the
widget against which the menu should be placed.  When the width and
height of the geometry are zero (or unspecified), it describes the point
at which the menu should be placed.

=back

=back

=head2 WORKSPACE OPTIONS

Often, light-weight window managers will have a workspace and window
menu as part of their root menus (e.g. L<blackbox(1)>, L<fluxbox(1)>,
L<openbox(1)>).  This provides the same mechanism for the GTK2 menu for
window managers that do not support a root menu, or for those that would
simply like a consistent look and feel in the root menu.  The following
options affect how work spaces and clients are shown in such a menu:

=over

=item B<--order>, B<-O> I<ORDER>

Specifies the order, I<ORDER>, in which clients are shown, as follows:

=over

=item C<client>

Clients are listed in client order.  This is the same order that it
presented in the C<_NET_CLIENT_LIST> property on the root window of EWMH
compliant window managers.

=item C<stacking>

Clients are listed in stacking order.  This is the same order that is
presented in the C<_NET_CLIENT_LIST_STACKING> property on the root
window of EWMH compliant window managers.

=back

When unspecified, the default is client order (or whichever order is
supported when the window manager does not support both).

This option can be set with the resource I<xde-menu.order>.

=item B<--normal>, B<-n>

This option can be set with the resource I<xde-menu.normal>.

=item B<--hidden>, B<-H>

When listing clients, also list hidden clients.  The default is to skip
hidden clients or clients that have the skip-window-list attribute.

This option can be set with the resource I<xde-menu.hidden>.

=item B<--minimized>, B<-m>

When listing clients, also list minimized clients.  The default is to
skip minimized clients or clients that have the skip-window-list
attribute.

This option can be set with the resource I<xde-menu.minimized>.

=item B<--all-monitors>, B<-a>

When listing clients, also list clients displayed on monitors other than
the current one.  This includes clients on workspaces that are currently
visible on a monitor.

This option can be set with the resource I<xde-menu.allmonitors>.

=item B<--all-workspaces>, B<-A>

When list clients, also list clients displayed on workspaces other than
the current one.  As clients are listed, the current workspace may
change as clients from other workspaces are listed.

This option can be set with the resource I<xde-menu.allworkspaces>.

=item B<--noactivate>, B<-N>

When selecting clients, do not activate them.  The default is to
activate the selected client.  When neither B<--raise> nor B<--focus>
are specified, this results in linly highlighting the menu selection.
Activation of the window will still occur; however, when the window is
selected (e.g. a modifier key is released).

This option can be set with the resource I<xde-menu.activate>.

=item B<--raise>, B<-U>

When selecting clients, raise the window.  The default is to only
activate the selected client and not to explicitly raise it.  Some
window managers raise windows when activated (others do not).  This
provides a modicum of control.

This option can be set with the resource I<xde-menu.raise>.

=back

=head2 SESSION MANAGEMENT OPTIONS

X session management options are not used by another user other than the
X11 Session Manager.  The following options are used by X session
management:

=over

=item B<-clientId> I<CLIENTID>

Specifies the X Session Management client identifier, I<CLIENTID>, of
the previously running session of B<xde-menu>.

=item B<-restore> I<SAVEFILE>

Specifies the X Session Management file name of a file, I<SAVEFILE>, to
which to session information was saved for restoration.

=back

=head1 USAGE

B<xde-menu> currently uses F<libwnck+> or F<libwnck> both to identify
the window manager and to provide the window manager actions menu.  The
range and format of window manager actions provided by F<libwnck+> is
superior to F<libwnck>.  This use means that B<xde-menu> does not
currently provide any support for window managers that do not have a
modicum of compliance to the EWMH/NetWM specifications.  That may change
in the future.

To locate the menu under a button that was pressed in, for example, an
external panel, where the button has geometry "55x20+30+0", specify the
C<--where='55x20+30+0'> option.  This will properly position the menu
under the button.

=head2 WINDOW MANAGERS

The following window managers and menu environments are supported by
B<xde-menu>:

=over

=item B<--wmname=>I<2bwm> B<--format=>I<2bwm>

Like L<dwm(1)>, L<2bwm(1)> does not provide a root menu; however, it
does provide a mechanism for invoking an external root menu.
This can be used to invoke the GTK+ version of the root menu (i.e.
pop-up menu).

L<2bwm(1)> does not provide a user-settable style mechanism.  Therefore,
theme sub-menus provide only for the selection of XDE themes.

=item B<--wmname=>I<adwm> B<--format=>I<adwm>

Like L<dwm(1)>, L<adwm(1)> does not provide a root menu; however, it
does provide a mechanism for invoking an external root menu.
This can be used to invoke the GTK+ version of the root menu (i.e.
pop-up menu).

L<adwm(1)> provides a user-settable style mechanism.  Therefore, both
style and theme sub-menus can be generated.

=item B<--wmname=>I<aewm> B<--format=>I<aewm>

L<aewm(1)> is not tested, but should work fine.

=item B<--wmname=>I<aewm++> B<--format=>I<aewm++>

L<aemw++(1)> is barely ICCCM compliant and will likely not work well.

=item B<--wmname=>I<afterstep> B<--format=>I<afterstep>

No support has yet been included for L<afterstep(1)>.  Only generic
applications menu and XDE theme sub-menus will currently be generated.
The L<afterstep(1)> root menu is not supported.

=item B<--wmname=>I<awesome> B<--format=>I<awesome>

No support has yet been included for L<awesome(1)>.  Only generic
applications menu and XDE theme sub-menus will currently be generated.
The L<awesome(1)> root menu is not supported.

=item B<--wmname=>I<blackbox> B<--format=>I<blackbox>

L<blackbox(1)> provides a root menu that is formatted similar to
L<fluxbox(1)> and the older L<openbox(1)> (C<openboxold>) menu style.
The primary difference is that L<blackbox(1)> does not support the
display of icons.

Sub-menus of user-settable L<blackbox(1)> styles and corresponding XDE
themes can be generated.

=item B<--wmname=>I<bspwm> B<--format=>I<bspwm>

L<bspwm(1)> has fairly good EWMH/NetWM support and should work fine, but
is untested.

=item B<--wmname=>I<ctwm> B<--format=>I<ctwm>

L<ctwm(1)> provides a root menu that is formatted similar to L<twm(1)>.
This root menu format does not support the display of icons.

L<ctwm(1)> when launched with XDE configuration files supports
user-settable styles.  Sub-menus of user-settable L<ctwm(1)> styles and
corresponding XDE themes can be generated.

=item B<--wmname=>I<cwm> B<--format=>I<cwm>

L<cwm(1)> only provides a rudimentary root menu (with no ability to
generate sub-menus); however, it has the ability to specify command
actions in response to key bindings or mouse buttons and can easily be
configured to launch the GTK+ menu.

L<cwm(1)> does not really have a user-settable style system; however,
the colors of some things can be changed using the configuration file
and the window manager can be restarted.  L<xde-style(1)> does not fully
support L<cwm(1)> yet, so sub-menus of user-settable L<cwm(1)> styles
are not generated; however, XDE themes are.

=item B<--wmname=>I<dtwm> B<--format=>I<dtwm>

L<dtwm(1)> provides a root menu that is formatted similar to L<twm(1)>.
This root menu format does not support the display of icons.

L<dtwm(1)> does not really have a user-settable style system.  Current
support is only for setting XDE themes.

=item B<--wmname=>I<dwm> B<--format=>I<dwm>

L<dwm(1)> does not provide a root menu; however, it does provide a
mechanism for invoking an external root menu.  This is used to invoke
the GTK+ version of the root menu.

=item B<--wmname=>I<echinus> B<--format=>I<echinus>

Like L<dwm(1)>, L<echinus(1)> does not provide a root menu; however, it
does provide a mechanism for invoking an external root menu.  This is
used to invoke the GTK+ version of the root menu.

=item B<--wmname=>I<etwm> B<--format=>I<etwm>

L<etwm(1)> provides a root menu that is formatted similar to L<twm(1)>.
This root menu format does not support the display of icons.

=item B<--wmname=>I<failsafewm> B<--format=>I<failsafewm>

L<failsafewm(1)> is not supported.

=item B<--wmname=>I<fluxbox> B<--format=>I<fluxbox>

L<fluxbox(1)> provides a root menu that is formatted similar to
L<blackbox(1)>.  This root menu, however, provides additional support
for the display of icons.

=item B<--wmname=>I<flwm> B<--format=>I<flwm>

L<flwm(1)> uses a directory of executables instead of a file format in
the identical fashion to the L<wmx(1)> window manager on which it is
based.  It does not support the use of icons in menu items.  In fact,
this is an alias for I<wmx> as the two formats are completely compatible
and interoperable.

=item B<--wmname=>I<fvwm> B<--format=>I<fvwm>

L<fvwm(1)> provides a root menu using its own unique menu format.
Although at one time L<fvwm(1)> used a L<dtwm(1)>-like menu format, it
now uses its own unique L<perl(1)> interface.  L<fvwm(1)> supports the
use of icons in menu items.

=item B<--wmname=>I<glasswm> B<--format=>I<glasswm>

L<glasswm(1)> provides only some ICCCM support and is not supported.

=item B<--wmname=>I<goomwwm> B<--format=>I<goomwwm>

L<goomwwm(1)> provides EWMH/NetWM support and should work well, but is
untested.

=item B<--wmname=>I<herbstluftwm> B<--format=>I<herbstluftwm>

L<herbstluftwm(1)> provides EWMH/NetWM support and should work well, but
is untested.

=item B<--wmname=>I<i3> B<--format=>I<i3>

L<i3(1)> provides EWMH/NetWM support and should work well, but is
untested.

=item B<--wmname=>I<icewm> B<--format=>I<icewm>

L<icewm(1)> provides a programs menu using its own unique menu format.
It support the display of icons in menu items.  L<icewm(1)> does not
provide the ability to specify the entire root menu: some items in the
root menu are fixed by window manager and do not appear in the menu
file.

=item B<--wmname=>I<jwm> B<--format=>I<jwm>

L<jwm(1)> provides a root menu using its own XML-based menu format.  It
support the display of icons in menu items.  L<jwm(1)> recently had a
rework of its configuration files.  Unless you are on the most current
versions, your mileage may vary.

=item B<--wmname=>I<larswm> B<--format=>I<larswm>

L<larswm(1)> is barely ICCCM compliant and is, therefore, not supported.

=item B<--wmname=>I<matwm2> B<--format=>I<matwm2>

Like L<dwm(1)>, L<matwm2(1)> does not provide a root menu; however, it
does provide a mechanism for invoking an external root menu.  This is
used to invoke the GTK+ version of the root menu.

=item B<--wmname=>I<metacity> B<--format=>I<metacity>

L<metacity(1)> does not provide a root menu; however, it has ample
facility for launching the GTK+ menu.

=item B<--wmname=>I<mvwm> B<--format=>I<mvwm>

L<mvwm(1)> is a derivative of L<fvwm(1)> and should work well.

=item B<--wmname=>I<mwm> B<--format=>I<mwm>

L<mwm(1)> is the old pre-openmotif window manager that was intended on
providing the capabilities of the L<dtwm(1)> OSF/Motif/CDE window
manager.  It provides a root menu following a similar configuration file
format to L<twm(1)>, L<ctwm(1)>, L<etwm(1)> and L<vtwm(1)>.  It does not
have the ability to display icons in menu items.

Like L<dtwm(1)>, L<mwm(1)> does not really have a user-settable style
system.  Current support is only for setting XDE themes.

=item B<--wmname=>I<openbox> B<--format=>I<openbox> or B<--format=>I<openboxold>

Two formats are supported for the L<openbox(1)> window manager: the
newer openbox-3 XML format (I<openbox>) and the older
L<fluxbox(1)>-like menu format (I<openboxold>). The default for the
L<openbox(1)> window manager is the newer style; however, it still
supports both formats.  Both formats support the use of icons in menu
items.

=item B<--wmname=>I<pekwm> B<--format=>I<pekwm>

L<pekwm(1)> provides a root menu that is formatted using its own file
format.  It supports dynamic menus and provides support for displaying
icons in menu elements.

=item B<--format=>I<perlpanel>

L<perlpanel(1)> can read a L<fluxbox(1)> or L<blackbox(1)> style menu
and generate a GTK+ menu from it.  This format generates a
L<fluxbox(1)>-like menu for use by L<perlpanel(1)>.  (Note that this
format can be specified in addition to other formats, in which case,
this format will be generated as well.)  The menu file is typically
stored in F<~/.perlpanel/menu>, F<~/.config/perlpanel/menu> or
F</usr/share/perlpanel/menu>, independent of which window manager is
currently running.

=item B<--wmname=>I<spectrwm> B<--format=>I<spectrwm>

Like L<dwm(1)>, L<spectrwm(1)> does not provide a root menu; however, it
does provide a mechanism for invoking an external root menu.  This is
used to invoke the GTK+ version of the root menu.

=item B<--wmname=>I<twm> B<--format=>I<twm>

L<twm(1)> provides a root menu that uses its own format.  L<ctwm(1)>,
L<etwm(1)> and L<vtwm(1)> share this format.  The format does not
support the display of icons in the root menu.

=item B<--wmname=>I<uwm> B<--format=>I<uwm>

L<uwm(1)> provides a root menu that uses its own format.  The format
supports the use of icons in menu items.

=item B<--wmname=>I<vtwm> B<--format=>I<vtwm>

L<vtwm(1)> provides a root menu that is formatted similar to L<twm(1)>.
This root menu format does not support the display of icons.

=item B<--wmname=>I<waimea> B<--format=>I<waimea>

L<waimea(1)> provides a root menu that is formatted similar to
L<blackbox(1)>.  As with L<blackbox(1)>, this root menu does not support
the display of icons.

=item B<--wmname=>I<wind> B<--format=>I<wind>

L<wind(1)> does not have a root menu: it doesn't have any menus at all.
L<wind(1)> window manager is difficult to support: the window manager
has no mechanism for launching a menu.  However, an external key-binder
such as L<bbkeys(1)> can be used to launch the menu.  Also, it appears
that L<wind(1)> does not grab button clicks on the root window.

=item B<--wmname=>I<wm2> B<--format=>I<wm2>

L<wm2(1)> uses a directory of executables instead of a file format in
the identical fashion to L<flwm(1)> (which as based on L<wmx(1)>, a
derivative of L<wm2(1)>).  It does not support the use of icons in menu
items.  In fact, this is an alias for I<flwm> as the two formats are
completely compatible and interoperable.

However, L<wm2(1)> barely provides ICCCM support and is, therefore,
poorly supported.  Use its EWMH compliant derivative, L<wmx(1)>, or its
derivative L<flwm(1)>.

=item B<--wmname=>I<wmaker> B<--format=>I<wmaker> or B<--format=>I<wmakerold>

Two formats are supported for the L<wmaker(1)> window manager: the newer
window maker lisp-based menu (I<wmaker>) and the older line-based menu
(I<wmakerold>).  The default for the L<wmaker(1)> window manager is the
newer style; however, it still supports both formats.  Neither format
supports the use of icons in menu items.

=item B<--wmname=>I<wmii> B<--format=>I<wmii>

L<wmii(1)> provides EWMH/NetWM support and should work well, but is
currently untested.

=item B<--wmname=>I<wmx> B<--format=>I<wmx>

L<wmx(1)> uses a directory of executables instead of a file format in
the identical fashion to L<flwm(1)> (which was based on L<wmx(1)>).  It
does not support the use of icons in menu items.  In fact, this is an
alias for I<flwm> as the two formats are completely compatible and
interoperable.

=item B<--wmname=>I<xdwm> B<--format=>I<xdwm>

L<xdwm(1)> provides EWMH/NetWM support and should work well, but is
currently untested.

=item B<--wmname=>I<yeahwm> B<--format=>I<yeahwm>

L<yeahwm(1)> does not have a root menu: it doesn't have any menus at
all.  Therefore, the GTK+ menu must be used.   L<yeahwm(1)> is another
window manager that is difficult to support without an external key
binder (such as L<bbkeys(1)>).  Mouse button clicks on the root window
are intercepted by the window manager.  Support is unlikely.

=back

=head2 TERMINAL PROGRAMS

For desktop entries that set C<Terminal=true>, when they may also set
C<StartupWMClass> to a class name specific to the program being
executed.  Most terminal programs (and L<xterm(1)> specifically) can set
the C<WMCLASS> name and class to something other than that of the
terminal program (i.e. instead of C<xterm.XTerm>).  When the desktop
entries do so, B<xde-menu> will set the name attribute on the terminal
to the name specified when the terminal is launched, if possible.  This
also permits, for terminal emulation programs such as L<xterm(1)>, the
ability to set special terminal resources by application.  Because not
many desktop entry files do this, when no C<StartupWMClass> is
specified, the C<APPID> or C<BINARY> will be used instead and
C<StartupWMClass> will be automatically populated.

This procedure provides additional assistance to window managers when
terminal emulation programs do not properly observe startup
notification.  (For example, L<xterm(1)> does not properly observe
startup notification, even though it properly observes X11 Session
Management, whereas many other terminal emulators support both.)

It is possible to change the default terminal emulation program used
when these applications are launched by using environment variables (see
L</ENVIRONMENT>) or X resources (see L</X RESOURCES>).

Terminal programs that are known to B<xde-menu> are:
L<uxterm(1)>,
L<xterm(1)>,
L<st(1)>,
L<aterm(1)>,
L<rxvt(1)>,
L<alacritty(1)>,
which do not support startup notification, but do support setting the
resource name;
L<pterm(1)>,
L<Eterm(1)>,
L<urxvt(1)>,
L<urxvt-tabbed(1)>,
L<termit(1)>,
L<gnome-terminal(1)>,
L<termite(1)>,
L<mate-terminal(1)>,
L<terminology(1)>,
L<kitty(1)>,
which do support startup notification and do support setting the
resource name;
L<roxterm(1)>,
L<lxterminal(1)>,
L<xfce4-terminal(1)>,
L<lilyterm(1)>,
L<tilix(1)>,
L<guake(1)>,
L<terminator(1)>,
which do support startup notification but do not support setting the
resource name;
L<x-terminal-emulator(1)>,
L<deepin-terminal(1)>,
L<tilda(1)>,
which do support startup notification but do not support setting the
resource name, nor setting the window title;
L<qterminal(1)>,
L<konsole(1)>,
which do not support startup notification, nor setting the resource
name, nor setting the window title; and
L<koi8rxterm(1)>
which is language specific.

When the B<TERMINAL> environment variable is set to one of these
terminals (a terminal known to B<xde-menu>), it will automatically
determine the corresponding B<XDG_TERMINAL> and B<XDG_TERMRESN> commands
when they are not specified.  See L</X RESOURCES> and L</ENVIRONMENT>
below.  When no terminal environment variables are specified, terminal
programs will be detected in the user's B<PATH> in the order specified
above.  Note that L<terminix(1)> and L<hyper(1)> are currently unknown.
B<XDG_TERMINAL> and B<XDG_TERMRESN> must currently be specified to use
those or other unknown terminals.

See L</X RESOURCES> and L</ENVIRONMENT> below for more information on
selecting the terminal to use for launching applications that need one.


=head1 X RESOURCES

Most values that affect the look and feel of B<xde-menu> may also be
specified as X resources in the B<RESOURCE_MANAGER> database associated
with the X server.  All of these resources can have the specific
resource name and class (B<xde-menu>, B<XDE-Menu>).
B<xde-menu> specific resource defaults are contained in the
F</usr/share/X11/app-defautls/XDE-Menu> file, in accordance with the
convention for naming applications defaults files after their resource
class.  See also L</FILES>.


B<xde-menu> uses a standard X11 resource file for runtime configuration.
B<xde-menu> uses the following X11 Resource Manager resources (note that
the window manager name, I<WMNAME>, can optionally be specified before
the resource, where indicated, to alter behaviour for only a given
window manager):

=over

=item B<xde-menu>[.I<WMNAME>]B<.debug>: I<INTEGER>

Same values as B<--debug> option: an integer between zero (0) and
six(6), inclusive.

=item B<xde-menu>[.I<WMNAME>]B<.verbose>: I<INTEGER>

Same values as B<--verbose> option: an integer between zero (0) and six
(6), inclusive.

=item B<xde-menu>[.I<WMNAME>]B<.timeout>: I<TIME>

Specifies the amount of time for the pop-up to persist in milliseconds.
Not used.
No option equivalent.

=item B<xde-menu>[.I<WMNAME>]B<.iconsize>: I<UNSIGNED INTEGER>

Specifies the size of icons.
Not used.
No option equivalent.

=item B<xde-menu>[.I<WMNAME>]B<.fontsize>: I<DOUBLE>

Specifies the point size of fonts.
Not used.
No option equivalent.

=item B<xde-menu>[.I<WMNAME>]B<.border>: I<INTEGER>

Specifies the border around the pop-up in pixels.
Not used.
No option equivalent.

=item B<xde-menu>[.I<WMNAME>]B<.rootmenu>: I<PATH>

Same values as B<--root-menu> option: path to the root menu file.

=item B<xde-menu>[.I<WMNAME>]B<.fileout>: {B<true>|B<false>}

Truth value specifying whether to output the window manager root menu.

=item B<xde-menu>[.I<WMNAME>]B<.menufile>: I<PATH>

Same values as B<--output> option: path to the window manager root menu
file.

=item B<xde-menu>[.I<WMNAME>]B<.filename>: I<PATH>

Same values as B<--filename> option: path to the configuration file to
use.

=item B<xde-menu>[.I<WMNAME>]B<.noicons>: {B<true>|B<false>}

Truth value specifying whether to include icons in the applications
and window list menus.

=item B<xde-menu>[.I<WMNAME>]B<.theme>: I<NAME>

Same values as B<--theme> option: name of the XDE (GTK2+) theme name.
This resource should not be specified in a resource file and will not be
written by a save operation.

=item B<-xde-menu>[.I<WMNAME>]B<.icontheme>: I<NAME>

Same values as B<--icon-theme> option: name of the XDE (GTK2+) icon
theme name.  This resource should not be specified in a resource file
and will not be written by a save operation.

=item B<xde-menu>[.I<WMNAME>]B<.launch>: {B<true>|B<false>}

Truth value specifying whether to use L<xdg-launch(1)>, if available.
Same as the B<--launch> and B<--nolaunch> options.

=item B<xde-menu>[.I<WMNAME>]B<.runhist>: I<PATH>

Specifies the location of the run history file.  The default is
F<$XDG_CONFIG_HOME/run-history>.

=item B<xde-menu>[.I<WMNAME>]B<.recapps>: I<PATH>

Specifies the location of the recent applications file.  The default is
F<$XDG_CONFIG_HOME/recent-applications>.

=item B<xde-menu>[.I<WMNAME>]B<.recently>: I<PATH>

Specifies the location of the recently used files list.  The default is
F<$XDG_DATA_HOME/recently-used>, and if that file does not exist,
F<$HOME/.recently-used>.

=item B<xde-menu>[.I<WMNAME>]B<.recent>: I<PATH>

Specifies the location of the recently used applications list.  The
default is F<$XDG_DATA_HOME/recent-applications>, and if that file does
not exist, F<$HOME/.recent-applications>.

=item B<xde-menu>[.I<WMNAME>]B<.maximum>: I<INTEGER>

Same as the B<--maximum> option to L<xde-recent(1)>: specifies the
maximum number of recent applications or files to display in the recent
files and applications menus.  The minimum value is one, and the maximum
is 100.  The default value when unspecified is 50.  Specified as zero
(0) when there is no limit on the number to display.

=item B<xde-menu>[.I<WMNAME>]B<.menu>: I<FILESTEM>

Specifies the stem name of the menu used when determining the root menu
file for which to build the menu.  The default is C<applications>.  This
resource should typically not be used in the resource file and will not
be written by a save operation.

=item B<xde-menu>[.I<WMNAME>]B<.button>: I<UNSIGNED INTEGER>

Same as the B<--button> and B<--pointer> options: specifies the button
that was pressed to launch the menu (or zero (0) when no button was
pressed to launch the menu).  This resource should not be used in a
resource file and will not be written by a save operation.

=item B<xde-menu>[.I<WMNAME>]B<.keypress>: I<KEYSPEC>

Same as the B<--keypress> and B<--keyboard> options: specifies that the
menu was launched as a result of a key press instead of a button click.
This resource should not be used in a resource file and will not be
written by a save operation.

=item B<xde-menu>[.I<WMNAME>]B<.which>: {B<default>|B<active>|B<focused>|B<pointer>|I<SCREEN>}

Same as the B<--which> option: specifies which screen to use when
posting the menu.
This resource should not be used in a resource file and will not be
written by a save operation.

=item B<xde-menu>[.I<WMNAME>]B<.where>: {B<default>|B<pointer>|B<center>|B<topleft>|B<bottomright>|I<GEOMETRY>}

Same as the B<--where> option: specifies where on the screen to post the
menu.
This resource should not be used in a resource file and will not be
written by a save operation.

=item B<xde-menu>[.I<WMNAME>]B<.normal>: {B<true>|B<false>}

Truth value specifying whether to include normal windows in client lists.

=item B<xde-menu>[.I<WMNAME>]B<.hidden>: {B<true>|B<false>}

Truth value specifying whether to include hidden windows in client
lists.

=item B<xde-menu>[.I<WMNAME>]B<.minimized>: {B<true>|B<false>}

Truth value specifying whether to include minimized windows in client
lists.

=item B<xde-menu>[.I<WMNAME>]B<.allmonitors>: {B<true>|B<false>}

Truth value indicating whether to include windows from all monitors in
client lists.

=item B<xde-menu>[.I<WMNAME>]B<.allworkspaces>: {B<true>|B<false>}

Truth value indicating whether to include windows from all work spaces
in client lists.

=item B<xde-menu>[.I<WMNAME>]B<.activate>: {B<true>|B<false>}

Truth value specifying whether to activate selected windows from client
lists.

=item B<xde-menu>[.I<WMNAME>]B<.raise>: {B<true>|B<false>}

Truth value specifying whether to raise selected windows from client
lists.

=item B<xde-menu>[.I<WMNAME>]B<.systray>: {B<true>|B<false>}

Truth value specifying whether to install a status icon in the system
tray.

=item B<xde-menu>[.I<WMNAME>]B<.generate>: {B<true>|B<false>}

Truth value specifying whether to generate window manager root menus
when supported.

=item B<xde-menu>[.I<WMNAME>]B<.excluded>: {B<true>|B<false>}

Truth value specifying whether to include excluded applications in the
applications menu.

=item B<xde-menu>[.I<WMNAME>]B<.nodisplay>: {B<true>|B<false>}

Truth value specifying whether to include no-display applications in the
applications menu.

=item B<xde-menu>[.I<WMNAME>]B<.unallocated>: {B<true>|B<false>}

Truth value specifying whether to include unassigned applications in
the applications menu.

=item B<xde-menu>[.I<WMNAME>]B<.separators>: {B<true>|B<false>}

Truth value specifying whether to include all separators in the
applications menus.

=item B<xde-menu>[.I<WMNAME>]B<.sort>: {B<true>|B<false>}

Truth value specifying whether to sort applications by display name in
the applications menu.

=item B<xde-menu>[.I<WMNAME>]B<.tooltips>: {B<true>|B<false>}

Truth value specifying whether to include verbose tooltips for
applications in the applications menu.

=item B<xde-menu>[.I<WMNAME>]B<.actions>: {B<true>|B<false>}

Truth value specifying whether to offer desktop actions in the
applications menu for applications that provide actions.

=item B<xde-menu>[.I<WMNAME>]B<.exit>: {B<true>|B<false>}

Truth value specifying whether to exit once the window manager root
window has been generated.

=item B<xde-menu>[.I<WMNAME>]B<.termname>: I<TERMINAL-NAME>

Word specifying the name of the terminal emulation program executable
to be used to launch, or pass to L<xdg-launch(1)>, for applications that
need terminals.

=item B<xde-menu>[.I<WMNAME>]B<.terminal>: I<EXEC-COMMAND>

String specifying the terminal emulation program command
to be used to launch, or pass to L<xdg-launch(1)>, for applications that
need terminals.  This command can contain C<Exec> line substitutions.

=item B<xde-menu>[.I<WMNAME>]B<.termresn>: I<EXEC-COMMAND>

String specifying the terminal emulation program command to be used when
a resource name is available and can be set to launch, or pass to
L<xdg-launch(1)>, for applications that need terminals.  This command
can contain C<Exec> line substitutions; however, their C<%> must be
escaped with an additional C<%>, and somewhere in the command line there
must appear a L<printf(3)> style unescaped C<%s> expression to be
substituted with the resource name.

=back

=head1 ENVIRONMENT

The following environment variables are significant to the operation of
B<xde-menu>:

=over

=item C<$XDG_CURRENT_DESKTOP>

Specifies the current desktop.  When the B<--format> is not specified,
the format defaults to the value of this environment variable converted
to lower-case.  When the B<--desktop> is not specified, the desktop
defaults to the value of this environment variable.

=item C<$XDG_MENU_PREFIX>

Specifies the prefix to apply to the default menu name to derive the
root menu unless specified with the B<--root-menu> option.  When
unspecified, this variable defaults to a null string.

B<xde-menu> finds the root menu using the following logic:

=over

=item 1.

If a file name is specified using the B<--root-menu> option, (and the
window manager has not changed since B<xde-menu> was launched), that
file name is used as the root menu.

=item 2.

If the window manager has changed since B<xde-menu> was launched, any
B<--root-menu> option that was specified at launch is ignored.

=item 3.

If the file specified by B<--root-menu> is not found or unspecified, the
file name F<${XDG_MENU_PREFIX}applications.menu> is sought in each of
the sub-directories name F<menu> in the path
F<$XDG_CONFIG_HOME:$XDG_CONFIG_DIRS> in accordance with the XDG menu
specification.

Note that the stem F<applications> can be changed using the
B<--menu> option.

=item 4.

If not found, the file name F<applications.menu> is sought in each of
the F<menu> sub-directories in the path
F<$XDG_CONFIG_HOME:$XDG_CONFIG_DIRS> in accordance with the XDG menu
specification.

Note that the stem F<applications> can be changed using the
B<--menu> option.

=back

=item C<$XDG_CONFIG_HOME>

Specifies the user XDG configuration directory.  When unspecified, defaults
to F<$HOME/.config> in accordance with XDG specifications.

=item C<$XDG_CONFIG_DIRS>

Specifies the system XDG configuration directories.  When unspecified,
defaults to F</etc/xdg> in accordance with XDG specifications.

=item C<$XDG_DATA_HOME>

Specifies the user XDG data directory.  When unspecified, defaults to
F<$HOME/.local/share> in accordance with XDG specifications.

=item C<$XDG_DATA_DIRS>

Specifies the system XDG data directory search path.  When unspecified,
defaults to F</usr/local/share:/usr/share> in accordance with XDG
specifications.

=item C<$XDG_ICON_THEME>

Specifies the name of the icon theme.  When not specified, the icon
theme will be determined from configuration sources (e.g. the
F<$HOME/.gtkrc-2.0> file).

=item C<$XDG_TERMINAL>

Used by B<xde-menu>, or passed to L<xdg-launch(1)>, as the command to
prefix to the C<Exec> line of terminal applications to launch
applications within a terminal.

=item C<$XDG_TERMRESN>

Used by B<xde-menu>, or passed to L<xdg-launch(1)>, as the command to
prefix to the exec line of terminal applications to launch applications
within a terminal when a resource name is available to be set on the
terminal.  (Not necessarily defined for all terminal types).

=item C<$TERMINAL>

Use by B<xde-menu>, or passed to L<xdg-launch(1)>, as the name of the
preferred terminal program to run.  If this terminal is known to
B<xde-menu>, it will automatically determine the corresponding
B<XDG_TERMINAL> and B<XDG_TERMRESN> commands when they are not
specified.
See L</TERMINAL PROGRAMS>, above, for a list of known terminal emulation
programs.

=back

=head1 PROPERTIES

The following X11 window properties are significant to the operation of
B<xde-menu>:

=over

=item C<_XDE_WM_NAME>

When available and set on the root window, specifies the window manager
name used to derive the B<--wmname> and B<--format> options when the
options are unspecified or when the window manager has changed since the
B<xde-menu> command was launched.

=item C<_NET_WM_NAME>

When C<_XDE_WM_NAME> is unavailable, and this property is set properly
on the window manager EWMH/NetWM check window, the first word of the
property will be used to derive the B<--wmname> and B<--format> options
when the options are unspecified or when the window manager has changed
since the B<xde-menu> command was launched.

=item C<_XDE_WM_STYLE>

When set on the root window, or XDE check window, used to determine the
location of the window manager style file.

=item C<_XDE_WM_STYLENAME>

When set on the root window, or XDE check window, used to determine the
name of the style set for the window manager.

=item C<_XDE_WM_THEME>

When set on the root window, or XDE check window, used to determine the
name of the theme set for XDE.

=item C<_XDE_WM_THEMEFILE>

When set on the root window or XDE check window, used to determine the
file to use for the theme set for XDE.

=back

=head1 FILES

Resources for configuration and tweaking the run-time operation of
B<xde-menu> are looked up in the order, below.  Resources that are read
later only have an effect if the resource was not already set by some
previous file.  The locations are as follows:

=over

=item B<RESOURCE_MANAGER>

The first place that resource configuration is examined is from the
B<RESOURCE_MANAGER> property on the root window of the screen on which
the menu is to be displayed.

=item F<$XDG_CONFIG_HOME/xde-menu/>B<WMNAME>I</rc>

The location of the window-manager specific user configuration file.
The window manager name component, B<WMNAME>, in the path, above, is the
all uppercase window manager name.  This location is used when there is
no user file specified.

=item F<$XDG_CONFIG_HOME/xde-menu/rc>

The default location of the generic user configuration file.  This is
used when there is no user file specified.

=item F</usr/share/X11/app-defaults/XDE-Menu>

The default location of the generic system configuration file.  This is
used when there is no user file available or to provide defaults when
one is available.

=back

The following file locations are scanned for recent files and
applications:

=over

=item F<$XDG_CONFIG_HOME/xde/recent-applications>

This is the location of a simple recent applications file maintained by
the L<xde-app(1)> launcher application.

=item F<$XDG_DATA_HOME/recently-used>

=item F<$HOME/.recently-used>

These are the locations (in order of preference) of a simple XML
formatted recently used files list maintained by legacy applications (as
well as L<xdg-launch(1)>).

=item F<$XDG_DATA_HOME/recent-applications>

=item F<$HOME/.recent-applications>

These are the locations (in order of preference) of a simple XML
formatted recently used applications list maintained by legacy
applications (as well as L<xdg-launch(1)>).

=item F<$XDG_DATA_HOME/recently-used.xbel>

This is the location of the current XBEL formatted recently used files
list maintained by current applications (as well as L<xdg-launch(1)>).

=item F<$XDG_DATA_HOME/recent-applications.xbel>

This is the location of the current XBEL formatted recently used
applications lists maintained by current applications (as well as
L<xdg-launch(1)>).

=back

=head1 HISTORY

B<xde-menu> was written for a number of reasons:

=over

=item 1.

Existing lightweight menu generators that read XDG F<.desktop> files
(e.g. L<fbmenugen(1)>, L<menutray(1)>) do not conform to the XDG menu
generation specifications and in particular are incapable of merging
menus.

Many existing light-weight window manager generators that read XDG
F<.desktop> files do not conform to the XDG menu generation
specifications and, in particular, are incapable of merging menus.

=item 2.

Existing XDG menu generators (such as the SuSE L<xdg_menu(1)> C<perl>
script) do not properly merge default merge directories and do not
observe C<E<lt>LayoutE<gt>> commands.  Also, they are poor at including
icons in the generated menus.  They, of course, do not generate system
tray nor pop-up menus either.

=item 3.

Existing XDG menu generators run once and keep cache information, or
have a C<regenerate> command placed in the menu.  They do not monitor
XDG directories for changes and update menus on changes.

=item 4.

The L<lxpanel(1)> and L<pcmanfm(1)> menu generators do not have any of
the above deficiencies; however, they do not create window manager
specific sub-menus.  Also, they are buggy and generally fail to display
a menu at all when they have a problem.  They do not handle the
C<E<lt>FileNameE<gt>> tag within a C<E<lt>LayoutE<gt>> tag.

=item 5.

None of the menu-generating facilities that I have found can handle an
NFS-mounted home directory.  I find this annoying: XDG menus are host
specific.

=back

This program largely incorporates the perl versions of the
L<xdg-traymenu(1p)> and L<xdg-menugen(1p)> programs.  The reason for
incorporating both together was to reduce the amount of time that is
taken to read and cache F<.desktop> file information.

=head1 AUTHOR

Brian Bidulock L<mailto:bidulock@openss7.org>.

=head1 SEE ALSO

L<xde-style(1)>,
L<xde-menugen(1)>,
L<xdg-traymenu(1p)>,
L<xdg-menugen(1p)>,
L<xde-identify(1)>,
L<inotify(7)>.

=cut

# vim: set ft=pod sw=4 tw=72 nocin spell spelllang=en_ca:
